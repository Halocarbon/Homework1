(a).Cloud computing provides three primary service models:

1. Infrastructure as a Service (IaaS)

Definition: IaaS delivers virtualized computing resources over the internet such as servers, storage, and networking. Users manage the operating system, runtime, and applications.

Example in Software Development: A developer team can use AWS EC2 to provision virtual machines for running development or testing environments without purchasing physical hardware.

Advantage: Offers high flexibility and scalability to set up custom environments.

2. Platform as a Service (PaaS)

Definition: PaaS provides a ready-to-use platform that includes the operating system, middleware, and runtime environment. Developers can build, run, and deploy applications without worrying about infrastructure.

Example in Software Development: Developers can deploy web applications directly on Heroku or Google App Engine, which manage scaling and server setup automatically.

Advantage: Accelerates development and reduces infrastructure management.

3. Software as a Service (SaaS)

Definition: SaaS delivers fully functional applications over the internet, usually accessible through a browser or API.

Example in Software Development: Development teams use GitHub for version control or Jira for project management as part of their workflow.

Advantage: No installation required, accessible from anywhere, typically subscription-based.

(b) Docker and Containerization
What is Docker?

Docker is an open-source platform that enables developers to build, package, and run applications inside lightweight containers. Containers include the application and its dependencies, ensuring consistent behavior across different environments.

Scenario Example

Imagine a software team building a microservices-based e-commerce application consisting of Node.js services, Python services, and a MySQL database.

Without Docker: Each developer must manually install the correct versions of Node.js, Python, and MySQL, which often leads to configuration conflicts.

With Docker: Each service runs in its own container with the correct dependencies. Developers only need to run the container, and the environment will be identical on every machine.

Contribution of Containerization

Provides consistency across development, testing, and production environments.

Containers start quickly and are lighter than virtual machines.

Simplifies scaling, deployment, and integration with CI/CD pipelines.

(c) Deploying n8n with Docker
Explanation of the Command:

docker run: Creates and starts a new container.

-it: Runs the container in interactive mode with a terminal.

--rm: Automatically removes the container when it stops to avoid clutter.

-p 5678:5678: Maps port 5678 of the host machine to port 5678 in the container, allowing access via http://127.0.0.1:5678.

-v ~/.n8n:/home/node/.n8n: Mounts the local directory ~/.n8n to the container directory /home/node/.n8n so that workflows and settings persist.

n8nio/n8n: Specifies the official n8n Docker image from Docker Hub.
